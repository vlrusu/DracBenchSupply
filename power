#!/usr/bin/python
import argparse
import serial
import serial.tools.list_ports

# def send_to_serial(port, tosend):
#     try:
#         # Open the serial port
#         ser = serial.Serial(port, 115200, timeout=1)
#         # Convert the number to bytes and write to the serial port
#         ser.write(tosend.encode())
#         ser.close()

def find_key_by_value(my_dict, search_value):
    for key, value in my_dict.items():
        if value == search_value:
            return key
    return None

def list_usb_serial_devices(device_type):
    available_ports = serial.tools.list_ports.comports()
    
    usb_serial_devices = []
    
    for port in available_ports:
 #       print(port.description)
        if device_type in port.description:
            usb_serial_devices.append((port.device, port.serial_number))
    
    return usb_serial_devices



if __name__ == "__main__":
    # Create the parser
    parser = argparse.ArgumentParser(description='Send a number to a specified serial port.')

    # Add arguments
    parser.add_argument('-p','--port', type=str, help='The name of the serial port (e.g., COM3, /dev/ttyUSB0)',default="/dev/ttyACM0")
    parser.add_argument('-t','--ts', type=str, help='Teststand number',default="-1")
    parser.add_argument('state', choices=['on', 'off', 'data'], help='Set power state to on or off or data to get data',default='data',nargs="?")

    parser.add_argument('--list', action='store_true', help='List devices')
    
    # Parse the arguments
    args = parser.parse_args()

    device_type = "Pico - Board CDC"  # Modify this to match the device type you're looking for


    tsmap={
        "0": "b0",
        "1": "b1",
        "2": "b2"
        }

    # Get a list of all available serial ports
    usb_serial_devices = list_usb_serial_devices(device_type)
    sers = []
    if usb_serial_devices:
#        print("USB Serial Devices:")
        for device, serial_number in usb_serial_devices:
#            print(f"Device: {device}, Serial Number: {serial_number}")
            try:
                ser = serial.Serial(device,115200,exclusive=True,timeout=1)
                sers.append(ser)
            except Exception as e:
                print(f"Error: {e}")


    else:
        print("ERROR: No USB Serial Devices found.")
        exit()

    mapdata=dict()
    for ser in sers:

        ser.write(b'D')
        ret = ser.readline().decode('ascii').strip()
        idevice = ret
        ser.write(b'S')
        ret = ser.readline().decode('ascii').strip()
        istatus = ret
        
        mapdata[idevice] = (ser.port,istatus)
        
        ser.close()

    if args.list: 
        for device,data in mapdata.items():
            ts = find_key_by_value(tsmap,device)
            status = {"0": "off", "1": "on"}
            print(f' TS {ts} : DeviceID {device} : Port {data[0]} : Power {status[data[1]]} ')
#        print(mapdata)
        exit()

    if args.ts in tsmap:
        deviceid = tsmap[args.ts]
    else:
        print(f'ERROR: TS {args.ts} does not exist')
    
        
#    deviceid = args.address
    if deviceid in mapdata:
        print(f'deviceid={deviceid} port={mapdata[deviceid][0]}')
    else:
        print(f'ERROR: deviceid={deviceid} not found')
        exit()
    ser = serial.Serial(mapdata[deviceid][0],115200,exclusive=True)


        
    # Send the number to the serial port
    if (args.state == 'on'):
        ser.write(b'U')
    elif (args.state == 'off'):
        ser.write(b'O')

    elif (args.state == 'data'):
        ser.write(b'A')
        for i in range(6):
            print(ser.readline().strip().decode())

        
    ser.close()
