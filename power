#!/usr/bin/python
import argparse
import serial
import serial.tools.list_ports

# def send_to_serial(port, tosend):
#     try:
#         # Open the serial port
#         ser = serial.Serial(port, 115200, timeout=1)
#         # Convert the number to bytes and write to the serial port
#         ser.write(tosend.encode())
#         ser.close()



def list_usb_serial_devices(device_type):
    available_ports = serial.tools.list_ports.comports()
    
    usb_serial_devices = []
    
    for port in available_ports:
 #       print(port.description)
        if device_type in port.description:
            usb_serial_devices.append((port.device, port.serial_number))
    
    return usb_serial_devices



if __name__ == "__main__":
    # Create the parser
    parser = argparse.ArgumentParser(description='Send a number to a specified serial port.')

    # Add arguments
    parser.add_argument('-p','--port', type=str, help='The name of the serial port (e.g., COM3, /dev/ttyUSB0)',default="/dev/ttyACM0")
    parser.add_argument('-a','--address', type=str, help='Device address',default="B2")
    parser.add_argument('--on', action='store_true', help='The number to send to the serial port')
    parser.add_argument('--off', action='store_true', help='The number to send to the serial port')
    parser.add_argument('--list', action='store_true', help='List devices')
    parser.add_argument('-d','--getdata', action='store_true', help='List data')
    
    # Parse the arguments
    args = parser.parse_args()

    device_type = "Pico - Board CDC"  # Modify this to match the device type you're looking for


    # Get a list of all available serial ports
    usb_serial_devices = list_usb_serial_devices(device_type)
    sers = []
    if usb_serial_devices:
        print("USB Serial Devices:")
        for device, serial_number in usb_serial_devices:
#            print(f"Device: {device}, Serial Number: {serial_number}")
            try:
                ser = serial.Serial(device,115200,exclusive=True,timeout=1)
                sers.append(ser)
            except Exception as e:
                print(f"Error: {e}")


    else:
        print("No USB Serial Devices found.")
        exit()

    mapdata=dict()
    for ser in sers:

        ser.write(b'D')
    
        ret = ser.readline().decode('ascii').strip()
        idevice = ret
        mapdata[idevice] = ser.port
        
        ser.close()

    if args.list:
        print(mapdata)
        exit()

    deviceid = args.address
    if deviceid in mapdata:
        print(f'deviceid={deviceid} port={mapdata[deviceid]}')
    else:
        print(f'deviceid={deviceid} not found')
        exit()
    ser = serial.Serial(mapdata[deviceid],115200,exclusive=True)


        
    # Send the number to the serial port
    if (args.on):
        ser.write(b'U')
    if (args.off):
        ser.write(b'O')

    if args.getdata:
        ser.write(b'A')
        for i in range(6):
            print(ser.readline().strip().decode())

        
    ser.close()
